/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package podweb;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import io.javalin.Javalin;
import io.javalin.testtools.JavalinTest;
import podweb.models.Comment;
import podweb.models.Episode;
import podweb.models.Listen;
import podweb.models.Query;

import static org.assertj.core.api.Assertions.*;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;

import java.sql.SQLException;
import java.util.Map;

public class ListenTest {
    Javalin app = App.setupApp();

    @BeforeEach
    public void setup() throws SQLException {
        Query.startTransaction();
    }

    @AfterEach
    public void finish() throws SQLException {
        Query.rollback();
    }

    @Test
    public void listen_can_send_progression_without_existing_listen_record() {
        JavalinTest.test(app, (server, client) -> {
            AppTest.actingAs(1);
            var lCount = Listen.o.count();
            Listen l = Listen.o.find(Map.of("episode_id", 1, "user_id", 1));
            assertNull(l);

            var res = client.post("/episodes/1/progression", "progression=20");
            assertThat(res.body().string()).doesNotContain("Failed");
            assertEquals(200, res.code());

            Listen l2 = Listen.o.find(Map.of("episode_id", 1, "user_id", 1));
            assertNotNull(l2);
            assertEquals(1, l2.episode_id);
            assertEquals(1, l2.user_id);
            assertEquals(20, l2.progression);
            assertEquals(0, l2.listening_count);
            assertEquals(lCount + 1, Listen.o.count());
        });
    }

    @Test
    public void listen_can_send_progression_in_middle() {
        JavalinTest.test(app, (server, client) -> {
            AppTest.actingAs(29);
            Listen l = Listen.o.find(Map.of("episode_id", 1, "user_id", 29)); // exists
            assertNotNull(l);
            assertEquals(763, l.progression);

            var res = client.post("/episodes/1/progression", "progression=134");
            assertThat(res.body().string()).doesNotContain("Failed");
            assertEquals(200, res.code());

            Listen l2 = Listen.o.find(Map.of("episode_id", 1, "user_id", 29));
            assertNotNull(l2);
            assertEquals(1, l2.episode_id);
            assertEquals(29, l2.user_id);
            assertEquals(134, l2.progression);
            assertEquals(l.listening_count, l2.listening_count);
        });
    }

    @Test
    public void listen_can_increase_listening_count_of_one_when_equals_episode_duration() {
        JavalinTest.test(app, (server, client) -> {
            AppTest.actingAs(29);
            Listen l = Listen.o.find(Map.of("episode_id", 1, "user_id", 29)); // exists
            assertNotNull(l);
            assertEquals(763, l.progression);
            assertEquals(1, l.listening_count);
            assertEquals(136, Episode.o.find(l.episode_id).duration);

            var res = client.post("/episodes/1/progression", "progression=136");
            assertThat(res.body().string()).doesNotContain("Failed");
            assertEquals(200, res.code());

            Listen l2 = Listen.o.find(Map.of("episode_id", 1, "user_id", 29));
            assertNotNull(l2);
            assertEquals(0, l2.progression); // reset
            assertEquals(l.listening_count + 1, l2.listening_count);

            // Again above duration
            var res2 = client.post("/episodes/1/progression", "progression=200");
            assertEquals(200, res2.code());
            Listen l3 = Listen.o.find(Map.of("episode_id", 1, "user_id", 29));
            assertNotNull(l3);
            assertEquals(0, l3.progression); // reset
            assertEquals(l.listening_count + 2, l3.listening_count);
        });
    }

    @Test
    public void listen_needs_to_be_logged() {
        JavalinTest.test(app, (server, client) -> {
            App.testingLoggedUser = null;
            var res = client.post("/episodes/1/progression", "progression=20");
            assertThat(res.body().string()).contains("Logged out");
        });
    }

    @Test
    public void listen_on_non_existant_episode_fails() {
        JavalinTest.test(app, (server, client) -> {
            AppTest.actingAs(1);
            var res = client.post("/episodes/992931/progression", "progression=20");
            assertThat(res.body().string()).contains("Episode not found");
        });
    }

    @Test
    public void listen_on_invalid_progression() {
        JavalinTest.test(app, (server, client) -> {
            AppTest.actingAs(1);
            var res = client.post("/episodes/1/progression", "progression=blabla");
            assertThat(res.body().string()).contains("Invalid progression");

            var res2 = client.post("/episodes/1/progression", "");
            assertThat(res2.body().string()).contains("Invalid progression");
        });
    }
}