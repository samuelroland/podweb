/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package podweb.models;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import io.javalin.Javalin;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.assertj.core.api.Assertions.*;

import java.sql.SQLException;
import java.util.ArrayList;

public class ModelTest {
    static Query<Podcast> q = new Query<>(Podcast.class);

    @BeforeEach
    public void setup() throws SQLException {
        Query.startTransaction();
    }

    @AfterEach
    public void finish() throws SQLException {
        Query.rollback();
    }

    @Test
    public void model_all_returns_all_items() {
        ArrayList<Podcast> podcasts = Podcast.o.all();
        assertNotNull(podcasts);
        assertEquals(35, podcasts.size());
        assertEquals("LJDS Le Journal Des Strat√®ges", podcasts.getFirst().title);
    }

    @Test
    public void model_getby_works() {
        ArrayList<Episode> episodes = Episode.o.getBy("podcast_id", 27);
        assertEquals(169, episodes.size());
    }

    @Test
    public void model_count_works() {
        assertEquals(35, Podcast.o.count());
    }

    @Test
    public void model_getfirstby_works() {
        Queue firstQueue = Queue.o.all().getFirst();
        assertNotNull(Queue.o.getFirstBy(new String[] { "user_id", "episode_id" },
                new Integer[] { firstQueue.user_id, firstQueue.episode_id }));
    }

    @Test
    public void model_exists_works() {
        assertTrue(Podcast.o.exists(27));
        assertFalse(Podcast.o.exists(4455));
    }

    @Test
    public void model_create_correctly_create_element() {
        int pCount = Podcast.o.count();

        Podcast p = new Podcast();
        // p.id; //undefined
        p.title = "hey there";
        p.description = "some desc";
        p.rss_feed = "feed.rss" + Math.random();
        p.image = "image.png";
        p.author = "me";
        p.episodes_count = 200;
        // assertEquals(35, Podcast.o.all().size());
        assertTrue(p.create());
        assertNotNull(p.id);
        assertNotEquals(0, p.id);

        assertEquals(pCount + 1, Podcast.o.count());

        var foundP = Podcast.o.find(p.id);
        assertEquals(foundP.id, p.id);
        assertEquals(foundP.title, p.title);
        assertEquals(foundP.description, p.description);
        assertEquals(foundP.image, p.image);
        assertEquals(foundP.rss_feed, p.rss_feed);
        assertEquals(foundP.episodes_count, p.episodes_count);
        assertEquals(foundP.author, p.author);
    }

    @Test
    public void model_create_correctly_create_element_without_id() {
        int qCount = Queue.o.count();

        Queue queueItem = new Queue();
        queueItem.user_id = 12;
        queueItem.episode_id = 322;
        queueItem.index = 3;
        queueItem.create();
        assertNotNull(queueItem.getFirstBy(new String[] { "user_id", "episode_id" }, new Integer[] { 12, 322 }));

        assertEquals(qCount + 1, Queue.o.count());
    }

    @Test
    public void model_update_works() {
        Podcast p = Podcast.o.find(27);
        assertEquals("Underscore_", p.title);
        p.title = "THE LIVE !";
        assertTrue(p.update());
        Podcast p2 = Podcast.o.find(27);
        assertNotNull(p2);
        assertEquals("THE LIVE !", p2.title);
    }

    // TODO: test and implement updating classes with other unique fields than id

}