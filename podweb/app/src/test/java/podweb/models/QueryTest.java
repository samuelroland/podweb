/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package podweb.models;

import org.junit.jupiter.api.Test;
import io.javalin.Javalin;
import podweb.App;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.assertj.core.api.Assertions.*;

import java.util.ArrayList;

public class QueryTest {

    static Javalin app = App.setupApp();

    @Test
    public void query_returns_a_list_podcasts() {
        Query<Podcast> q = new Query<>(Podcast.class);
        ArrayList<Podcast> podcasts = q.query("select * from podcasts;");
        assertNotNull(podcasts);
        assertEquals(35, podcasts.size());
        assertEquals("LJDS Le Journal Des Strat√®ges", podcasts.getFirst().title);
    }

    @Test
    public void query_returns_a_list_with_searched_podcast() {
        Query<Podcast> q = new Query<>(Podcast.class);
        ArrayList<Podcast> podcasts = q.query("select * from podcasts where id = 27;");
        assertNotNull(podcasts);
        assertEquals(1, podcasts.size());
        assertEquals("Underscore_", podcasts.getFirst().title);
    }

    @Test
    public void query_works_with_map_of_params() {
        Query<Podcast> q = new Query<>(Podcast.class);
        ArrayList<Podcast> podcasts = q.query("select * from podcasts where id = ?;", new Object[] { 27 });
        assertNotNull(podcasts);
        assertEquals(1, podcasts.size());
        assertEquals("Underscore_", podcasts.getFirst().title);
    }

    @Test
    public void query_works_with_an_object() {
        Query<Podcast> q = new Query<>(Podcast.class);
        Podcast p = new Podcast();
        p.id = (int) Math.random() + 1000;
        p.title = "hey there";
        p.description = "some desc";
        p.rss_feed = "feed.rss";
        p.image = "image.png";
        p.author = "me";
        p.episodes_count = 200;
        assertEquals(36, Podcast.all().size());

        int nb = q.update(
                "insert into podcasts (id, title, description, rss_feed, image, author, episodes_count) values (?,?,?,?,?,?,?);",
                p);
        assertNotEquals(-1, nb);
        assertEquals(37, Podcast.all().size());
        var foundP = Podcast.find(36);
        assertThat(foundP).isEqualTo(p);
    }

}