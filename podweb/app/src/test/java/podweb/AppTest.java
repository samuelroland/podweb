/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package podweb;

import org.junit.jupiter.api.Test;
import io.javalin.Javalin;
import io.javalin.testtools.JavalinTest;
import podweb.models.Podcast;
import podweb.models.User;

import static org.assertj.core.api.Assertions.*;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class AppTest {

    Javalin app = App.setupApp();

    @Test
    public void home_page_shows_the_list_of_podcasts() {
        JavalinTest.test(app, (server, client) -> {
            var res = client.get("/");
            assertEquals(200, res.code());
            String page = res.body().string();
            assertThat(page).contains("<h1>Podcasts");
            for (Podcast podcast : Podcast.o.all()) {
                assertThat(page).contains(podcast.title);
                assertThat(page).contains(String.valueOf(podcast.episodes_count));
            }
        });
    }

    @Test
    public void home_page_shows_logged_user_name_when_logged() {
        JavalinTest.test(app, (server, client) -> {
            // It makes sure we can login programmatically
            AppTest.actingAs(1);
            assertEquals(1, ((User) App.loggedUser(null)).id);

            // Do a request on behalf of Eulalia
            var res = client.get("/");
            assertEquals(200, res.code());
            String page = res.body().string();
            assertThat(page).contains("Eulalia");
            assertThat(page).contains("<button>Logout");
            assertThat(page).doesNotContain("Login");
        });
    }

    // In testing, make the requests act as the user with the given id
    // It makes App.loggedUser() return this user instead of looking in ctx
    public static void actingAs(int id) {
        App.testingLoggedUser = User.o.find(id);
    }
}