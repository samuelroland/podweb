/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package podweb;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import io.javalin.Javalin;
import io.javalin.testtools.JavalinTest;
import podweb.models.Comment;
import podweb.models.Query;

import static org.assertj.core.api.Assertions.*;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.sql.SQLException;
import java.util.ArrayList;

public class CommentsTest {
    Javalin app = App.setupApp();

    @BeforeEach
    public void setup() throws SQLException {
        Query.startTransaction();
    }

    @AfterEach
    public void finish() throws SQLException {
        Query.rollback();
    }

    @Test
    public void comments_page_exists() {
        JavalinTest.test(app, (server, client) -> {
            var res = client.get("/podcasts/1/comments");
            assertEquals(200, res.code());
            String page = res.body().string();
            ArrayList<Comment> comments = Comment.o.getBy("episode_id", 1);
            for (Comment comment : comments) {
                assertThat(page).contains(comment.content).contains(String.valueOf(comment.note));
                assertThat(page).contains((CharSequence) comment.date);
            }
            assertThat(page).contains("Comments").contains("<textarea").contains("Send comment</button");
        });
    }

    @Test
    public void comments_can_create_a_comment() {
        JavalinTest.test(app, (server, client) -> {
            var cCount = Comment.o.count();
            var res = client.post("/podcasts/1/comments", "content=heythere&note=5");
            assertEquals(200, res.code());
            String page = res.body().string();
            assertThat(page).doesNotContain("Login error");
            assertThat(page).contains("heythere").contains("5");

            assertEquals(cCount + 1, Comment.o.count());

            var newComment = Comment.o.getBy("episode_id", 1).getLast();
            assertEquals(newComment.content, "heythere");
            assertEquals(5, newComment.note);
        });
    }

    @Test
    public void comments_can_delete_a_comment() {
        JavalinTest.test(app, (server, client) -> {
            var cCount = Comment.o.count();
        });
    }


}