/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package podweb;

import java.nio.file.Path;
import java.util.Arrays;

import gg.jte.ContentType;
import gg.jte.TemplateEngine;
import gg.jte.resolve.DirectoryCodeResolver;
import io.javalin.Javalin;
import io.javalin.http.Context;
import io.javalin.http.HttpResponseException;
import io.javalin.http.staticfiles.Location;
import io.javalin.rendering.template.JavalinJte;
import podweb.controllers.*;
import podweb.models.User;

public class App {
    static final int PORT = 7000;
    static Javalin server;
    public static Object testingLoggedUser = null; // the logged user in testing

    public static void main(String[] args) {
        System.out.println("Podweb server has started...");
        server = setupApp().start(PORT);

        server.before(ctx -> {
            if (!ctx.path().endsWith(".css") && !ctx.path().endsWith(".ico"))
                System.out.println("New " + ctx.method() + " request on " + ctx.path());
        });
    }

    // Separated method to easily test the server
    public static Javalin setupApp() {
        JavalinJte.init(createTemplateEngine());

        // Search static files inside the default folder in dev and just a "static"
        // folder in production
        Javalin app = Javalin.create(config -> {
            String folder = "src/main/static";
            if (App.isProduction()) {
                folder = "static";
            }
            config.staticFiles.add(folder, Location.EXTERNAL);
        });

        // Defines routes

        // Podcasts related routes
        PodcastsController podcastsController = new PodcastsController();
        app.get("/", podcastsController::index);
        app.get("/podcasts/{id}", podcastsController::detailPodcast);
        app.get("/search", podcastsController::search);
        app.get("/ranking", podcastsController::ranking);

        // Episodes and comments related routes
        EpisodesController episodesController = new EpisodesController();
        app.get("/episodes/{id}", episodesController::episodeDetails);
        app.post("/episodes/{id}/progression", episodesController::updateListenProgression);

        // Comments related routes
        CommentController commentController = new CommentController();
        app.post("/episodes/{id}/comments", commentController::addComment);
        app.post("/comments/{id}/delete", commentController::deleteComment);

        // Auth routes
        UsersController usersController = new UsersController();
        app.get("/login", usersController::loginPage);
        app.post("/login", usersController::login);
        app.get("/logout", usersController::logout);

        // Users related routes
        app.get("/users/{id}", usersController::showProfile);
        app.get("/users", usersController::showAllUsers);

        manageErrorPages(app);
        return app;
    }

    private static void manageErrorPages(Javalin app) {
        // Return immediately if in production to avoid revealing sensitive errors
        if (isProduction()) return;

        // Display a formatted page with the error and its stack trace for debugging
        app.exception(Exception.class, (e, ctx) -> {
            StringBuilder msg = new StringBuilder("<div style='font-family: monospace; font-size: 1.5em;'><h1>Java exception</h1>");
            msg.append("<h2>").append(e).append("</h2>");
            formatStackTrace(e, msg);
            ctx.html(msg.toString()).status(500);
        });

        // Stack trace on 404 error
        app.exception(HttpResponseException.class, (e, ctx) -> {
            StringBuilder msg = new StringBuilder("<div style='font-family: monospace; font-size: 1.5em;'><h1>HttpResponseException</h1>");
            msg.append("<h2>").append(e).append("</h2>");
            formatStackTrace(e, msg);
            ctx.html(msg.toString()).status(404);
        });
    }

    // Format the stack trace of an exception to be displayed in HTML
    private static void formatStackTrace(Throwable e, StringBuilder msg) {
        Arrays.stream(e.getStackTrace()).forEach(element -> {
            boolean bold = element.getClassName().startsWith("podweb");
            msg.append("<br>").append(bold ? "<strong>" + element + "</strong>" : element);
        });
        msg.append("</div>");
    }

    // Configuration of JTE templates
    // Taken from the Javalin tutorials:
    // https://javalin.io/tutorials/jte#precompiling-templates
    private static TemplateEngine createTemplateEngine() {
        if (isProduction()) {
            // Production mode, use precompiled classes loaded in the JAR
            return TemplateEngine.createPrecompiled(Path.of("jte-classes"), ContentType.Html);
        } else {
            // Dev mode, compile on the fly templates in the default folder src/main/jte
            DirectoryCodeResolver codeResolver = new DirectoryCodeResolver(Path.of("src", "main", "jte"));
            return TemplateEngine.create(codeResolver, ContentType.Html);
        }
    }

    public static Object loggedUser(Context ctx) {
        // Hacky way to login as another user during testing
        if (testingLoggedUser != null) {
            return testingLoggedUser;
        }

        Object possibleUser = ctx.req().getSession().getAttribute("user");
        if (possibleUser == null)
            return 1; // just not a user as Map.of doesn't support null values
        return (User) possibleUser;
    }

    public static boolean logged(Context ctx) {
        return App.loggedUser(ctx) instanceof User;
    }

    public static boolean isProduction() {
        return System.getenv("PODWEB_PRODUCTION") != null;
    }
}
