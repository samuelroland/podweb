/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.5/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
	id "gg.jte.gradle" version "3.1.6" // From https://jte.gg/pre-compiling/#gradle
    id "au.id.wale.tailwind" version "0.2.0" // From https://github.com/wale/gradle-tailwind
}

tailwind {
    version = "3.4.0"
    configPath = "src/main/static"
    input = "src/main/static/style.css"
    output = "src/main/static/out.css"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

	//Some packages for Junit 3 parts
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation(platform('org.junit:junit-bom:5.10.1'))
	testImplementation('org.junit.jupiter:junit-jupiter')
    
	// This dependency is used by the application.
    implementation libs.guava

	//Javalin basic and advanced package to have testing tools
	implementation("io.javalin:javalin:5.6.3")
	testImplementation("io.javalin:javalin-bundle:5.6.3")

	//JTE setup
	implementation("io.javalin:javalin-rendering:5.6.3")
	implementation("gg.jte:jte:3.1.6")

	//Javalin proposed logger (in console)
	implementation("org.slf4j:slf4j-simple:2.0.7")

	//Database driver
	implementation 'org.postgresql:postgresql:42.7.1'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

// From the Gradle docs
// https://docs.gradle.org/current/userguide/working_with_files.html#sec:creating_uber_jar_example
tasks.register('uberJar', Jar) {
    archiveClassifier = 'uber'

	//Added to fix error 'Entry META-INF/LICENSE is a duplicate but no duplicate handling strategy has been set'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from sourceSets.main.output

    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
	//Added to fix error of main class not found when running with java -jar
	manifest {
        attributes["Main-Class"] = "podweb.App"
    }
}

// Just a way to make tailwind CLI to be downloaded and run at server start (to avoid running the tailwind-watch.sh)
tasks.run {
	// dependsOn(tasks.tailwindDownload, tasks.tailwindCompile)
}

tasks.uberJar {
	// Added tailwind compilation tasks, so production server has the latest compiled CSS (not minified though)
    dependsOn(tasks.precompileJte, tasks.tailwindDownload, tasks.tailwindCompile)
    from(fileTree("jte-classes") {
        include("**/*.class")
        include("**/*.bin") // Only required if you use binary templates
    })
}

// From https://jte.gg/pre-compiling/#gradle
jte {
    precompile()
}

application {
    // Define the main class for the application.
    mainClass = 'podweb.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

// Change logging settings for full details of tests failures
test {
	testLogging {
		events "failed"
		exceptionFormat "full"
	}
}