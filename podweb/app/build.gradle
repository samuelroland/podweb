/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.5/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
	id "gg.jte.gradle" version "3.1.6" // From https://jte.gg/pre-compiling/#gradle
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

	//Some packages for Junit 3 parts
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation(platform('org.junit:junit-bom:5.10.1'))
	testImplementation('org.junit.jupiter:junit-jupiter')

    //AssertJ
    testImplementation('org.assertj:assertj-core:3.25.1')
    
	// This dependency is used by the application.
    implementation libs.guava

	//Javalin basic and advanced package to have testing tools
	implementation("io.javalin:javalin:5.6.3")
	testImplementation("io.javalin:javalin-bundle:5.6.3")

	//JTE setup
	implementation("io.javalin:javalin-rendering:5.6.3")
	implementation("gg.jte:jte:3.1.6") 

	//Javalin proposed logger (in console)
	implementation("org.slf4j:slf4j-simple:2.0.7")

	//Database driver
	implementation 'org.postgresql:postgresql:42.7.1'

    //To avoid Jackson error on ctx.formParam()
    implementation("com.fasterxml.jackson.core:jackson-databind:2.15.0")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

// From the Gradle docs
// https://docs.gradle.org/current/userguide/working_with_files.html#sec:creating_uber_jar_example
tasks.register('uberJar', Jar) {
    archiveClassifier = 'uber'

	//Added to fix error 'Entry META-INF/LICENSE is a duplicate but no duplicate handling strategy has been set'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from sourceSets.main.output

    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
	//Added to fix error of main class not found when running with java -jar
	manifest {
        attributes["Main-Class"] = "podweb.App"
    }
}

tasks.uberJar {
    from(fileTree("jte-classes") {
        include("**/*.class")
        include("**/*.bin") // Only required if you use binary templates
    })
}

// From https://jte.gg/pre-compiling/#gradle
jte {
    precompile()
}

application {
    // Define the main class for the application.
    mainClass = 'podweb.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

// Change logging settings for full details of tests failures
test {
	testLogging {
		events "failed"
		exceptionFormat "full"
	}
    // Load env var from .env
    getenv().each { name, value -> environment name, value }
}

// Clear the output before tests run
// Very useful in gradle test --continuous 
// From https://discuss.gradle.org/t/possibility-to-clear-screen-before-continous-build-output/24488/3
// This will fail on Windows, change "clear" to "cls" !
gradle.addListener new BuildAdapter() {
    void projectsEvaluated(Gradle gradle) {
        exec { commandLine 'clear' }
    }
}


// Load environement variable from a .env file (useful for run and test)
// From https://gist.github.com/silas/b2454f259ce600056d455e57351bdf68
def static getenv(path = ".env") {
    def env = [:]

    def file = new File(path)
    if (file.exists()) {
        file.eachLine { line ->
            line = line.trim()
            if (line != "" && !line.startsWith("#")) {
                def pair = line.split("=", 2)
                env[pair[0].trim()] = pair.length == 2 ? pair[1].trim() : ""
            }
        }
    }

    return env
}

run {
    // Load env var from .env
    getenv().each { name, value -> environment name, value }
}
